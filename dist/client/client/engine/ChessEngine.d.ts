import { Piece, PieceType, PieceColor, Square, Move, GameState } from '../../shared/types';
export declare class ChessEngine {
    private gameState;
    constructor(fen?: string);
    private initializeGame;
    private fenToBoard;
    private charToPiece;
    private charToPieceType;
    private pieceToChar;
    private fenToCurrentPlayer;
    private fenToCastlingRights;
    private fenToEnPassantTarget;
    private fenToHalfmoveClock;
    private fenToFullmoveNumber;
    getGameState(): GameState;
    getPiece(square: Square): Piece | null;
    makeMove(from: Square, to: Square, promotion?: PieceType): Move | null;
    private executeMove;
    private executeCastling;
    private executeEnPassant;
    private updateCastlingRights;
    private updateEnPassantTarget;
    private updateClocks;
    isValidMove(from: Square, to: Square, promotion?: PieceType): boolean;
    getLegalMoves(square: Square): Array<{
        to: Square;
        promotion?: PieceType;
    }>;
    private getPseudoLegalMoves;
    private getPawnMoves;
    private getRookMoves;
    private getBishopMoves;
    private getQueenMoves;
    private getSlidingMoves;
    private getKnightMoves;
    private getKingMoves;
    private canCastleKingside;
    private canCastleQueenside;
    private wouldBeInCheck;
    isInCheck(color: PieceColor): boolean;
    private findKing;
    private isSquareAttacked;
    private canPieceAttackSquare;
    private isPathClear;
    private updateGameStatus;
    private hasLegalMoves;
    private isDrawByFiftyMoveRule;
    private isDrawByInsufficientMaterial;
    private isDrawByThreefoldRepetition;
    private calculateSAN;
    private calculateFEN;
    getAllLegalMoves(): Array<{
        from: Square;
        to: Square;
        promotion?: PieceType;
    }>;
    undoMove(): Move | null;
    isGameOver(): boolean;
    getGameResult(): 'white-wins' | 'black-wins' | 'draw' | '*';
}
